{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Venkymodelling/python-assignment-1-/blob/main/FMML_Aug22_M1Lab1_ASSESSMENT-1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Getting Started\n",
        "\n",
        "FMML Module 1, Lab 1 <br>\n",
        " Module Coordinator: Amit Pandey ( amit.pandey@research.iiit.ac.in ) <br>\n",
        " Release date: Aug 2022 <br>\n",
        "\n"
      ],
      "metadata": {
        "id": "TMVRKfbpTAeR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### In this notebook we will be covering the very basics of Python and some basic libraries such as Numpy, Matplotlib and Nltk.\n",
        "#### It is suggested that you go through each line and try some examples."
      ],
      "metadata": {
        "id": "F-XjWYLBTI0f"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Section 1 - Python : Basic data types and indexing."
      ],
      "metadata": {
        "id": "wEyEnIhnTdhB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## Strings\n",
        "'''\n",
        "A string is a collection of one or more characters put in a single quote,\n",
        " double-quote or triple quote. In python there is no character data type,\n",
        " a character is a string of length one. It is represented by str class.\n",
        "\n",
        "String can have special characters. String can be indexed\n",
        "\n",
        "'''\n",
        "\n",
        "\n",
        "name = 'First Lab'\n",
        "name_extended = name + 'Module 1'\n",
        "last_element_string = name[-1] # -1 in python is index of the last element. \n",
        "## indexing is important for preprocessing of the raw data. "
      ],
      "metadata": {
        "id": "AzguFJmTQIqt"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(name ,\"\\n\", name_extended, \"\\n\", last_element_string)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DPokcpuLQO6s",
        "outputId": "7525cced-25fb-49de-8395-7e9673fe1290"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First Lab \n",
            " First LabModule 1 \n",
            " b\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## List\n",
        "\n",
        "'''\n",
        "Lists are ordered collection of data, and are very similar to arrays, \n",
        "It is very flexible as the items in a list do not need to be of the same type.\n",
        "'''\n",
        "\n",
        "name_list = ['First Lab', 3 , '1.1' , 'Lab 1'] ## notice elements are of different data type.\n",
        "name_list.extend(['Module 1']) ## adding elements to list (Read about append method as well).\n",
        "element_2 = name_list[1] ## Just like other languages, the index starts from 0.\n",
        "two_dimesional_list = [[1,2],[3,4]] ## practice with multi-dimensional lists and arrays\n",
        "## you would soon be required to handle 4 dimensional data :p :)\n",
        "name_list[2] = '1.111' ##list elements can be changed"
      ],
      "metadata": {
        "id": "g7WZtwkpE2tO"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(name_list)\n",
        "print(element_2)\n",
        "print(two_dimesional_list)\n",
        "## list can have list, dictionary, string etc."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vblBrQflE9Cs",
        "outputId": "b914ca11-505d-4db0-838e-8e60ba54b39d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['First Lab', 3, '1.111', 'Lab 1', 'Module 1']\n",
            "3\n",
            "[[1, 2], [3, 4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Tuples\n",
        "\n",
        "name_tuple = ('First Lab', 1, (2,3),[1,1,'list having string']) ## A tuple can have a tuple.\n",
        " \n",
        "print(name_tuple[2])\n",
        "print(\"first indexing the last element of the tuple, which is a list and \\n then last element of the list (a string) and then second last element of the string:\")\n",
        "print(name_tuple[-1][-1][-2]) \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x5eOXNK5FtlF",
        "outputId": "31d668f4-c451-4cdd-aa7e-ea110bc304bd"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 3)\n",
            "first indexing the last element of the tuple, which is a list and \n",
            " then last element of the list (a string) and then second last element of the string:\n",
            "n\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## tuples are immutable, read the error !\n",
        " #usued when passing parameters etc. and dont want them to be changed\n",
        "name_tuple=list(name_tuple)\n",
        "name_tuple[1] = 2\n",
        "name_tuple"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m92Oab8YRha1",
        "outputId": "6ee9acd1-ec4a-4983-f6ad-26ecb1105f4d"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['First Lab', 2, (2, 3), [1, 1, 'list having string']]"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Sets\n",
        "'''a Set is an unordered collection of data types that is iterable, mutable and has no duplicate elements. \n",
        "The order of elements in a set is undefined though it may consist of various elements.\n",
        "The major advantage of using a set, as opposed to a list,\n",
        " is that it has a highly optimized method for checking whether a specific element is contained in the set.\n",
        "'''\n",
        "set_unique = set([1,1,2,3,5,6,'Lab1'])\n",
        "print(set_unique) ##notice it is unordered\n",
        "last_el = set_unique.pop()\n",
        "set_unique.add((1,2))\n",
        "\n",
        "\n",
        "print(last_el)\n",
        "print(set_unique)\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "MfkMO0mlTcep",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "726514c4-af1c-4c4a-8bd0-e444dc7d3771"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2, 3, 5, 6, 'Lab1'}\n",
            "1\n",
            "{(1, 2), 2, 3, 5, 6, 'Lab1'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "set_unique=list(set_unique)\n",
        "set_unique[1] ##it is not indexable"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QgHlNSRPampd",
        "outputId": "0960f0db-d11e-4631-e5d6-94da382c03b8"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Dictionary\n",
        "'''\n",
        "Dictionary in Python is an unordered collection of data values, used to store data values like a map,\n",
        " which, unlike other data types which hold only a single value as an element.\n",
        "'''\n",
        "\n",
        "dic = {'1': 'A','2':'B', 'C':3 } ##Observe how key and values can be anything\n",
        "dic['4'] ='New'\n",
        "print(dic)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rxhE3hYtZxVb",
        "outputId": "50788d75-30fa-4691-adf5-c0f02ae65c07"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'1': 'A', '2': 'B', 'C': 3, '4': 'New'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Question 0:\n",
        "###### write down 3-5 methods applicable to each data type. (Hint: extend, reverse, etc."
      ],
      "metadata": {
        "id": "hizs_paeceA5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Section 2 - Functions\n",
        "### a group of related statements that performs a specific task."
      ],
      "metadata": {
        "id": "tub_Skp3X1cN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def add_new(a:str, b): ## a and b are the arguments that are passed. to provide data type hint\n",
        "                              # def add_new(x: float, y: float) -> float: \n",
        "  sum = a + b\n",
        "  return sum\n",
        "\n",
        "ans = add_new(1,2) ## intentionally written str, and passed int, to show it doesn't matter. It is just hint\n",
        "print(ans)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K-6Q5T8nX_YF",
        "outputId": "408c88a6-befe-4015-877f-832710e5088b"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "asn = add_new(3,5)"
      ],
      "metadata": {
        "id": "aVLU3Bpu0YJV"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def check_even_list(num_list):\n",
        "    \n",
        "    even_numbers = []\n",
        "    \n",
        "    # Go through each number\n",
        "    for number in num_list:\n",
        "        # Once we get a \"hit\" on an even number, we append the even number\n",
        "        if number % 2 == 0:\n",
        "            even_numbers.append(number)\n",
        "        # Don't do anything if its not even\n",
        "        else:\n",
        "            pass\n",
        "    # Notice the indentation! This ensures we run through the entire for loop    \n",
        "    return even_numbers"
      ],
      "metadata": {
        "id": "aRa47XCsZLsh"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Question 1 :\n",
        "\n",
        "##### Define a function, which takes in two strings A and B. Reverses the first string A, adds it to B, and returns the final string.\n",
        "\n",
        "\n",
        "#### Question 2 : \n",
        "##### Given a list having Names, work_hours, and gender, Write a function to print name of the female worker that worked the most hours. Also how much do should she be paid if the pay is $ 20 per hour.\n",
        "\n",
        "##### work_hours = [('Abby',100 , 'F'),('Billy',400, 'M'),('Cassie',800,'F'), ('Maggi',600,'F'),('Alex',500,'M'),('Raj',225,'M'),('Penny',920,'F'),('Ben',300,'M')]\n",
        "\n",
        "##### Answer : the female worker that worked the most hours is Penny and she should be paid 18400"
      ],
      "metadata": {
        "id": "heD0_u4D01jp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Section 3 - Libraries and Reading data."
      ],
      "metadata": {
        "id": "T9fGzOAKXhtt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##### Numpy - One of the most used libraries - supports for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays."
      ],
      "metadata": {
        "id": "TKVyOsBKYZXa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "_ODaZ44RXkyg"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "a = np.array([1,1,2,3,4,5,5,6,1]) ## np.array converts given list to array\n",
        "\n",
        "b = a>1 ## important comparison operation, where frequently used in manipulation and image processing.\n",
        "\n",
        "print(b)\n",
        "print(a[b]) ## [printing only those values in a which are greater than 1]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "29vs7Iicavlg",
        "outputId": "33aa6551-b6c4-4806-f1e7-604383c7a30d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[False False  True  True  True  True  True  True False]\n",
            "[2 3 4 5 5 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a_range = np.arange(10,19).reshape(3,3) ## create a 3x3 array with values in range 10-19\n",
        "a_range\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MAGJJ1K_jCHN",
        "outputId": "1635178f-37ec-432e-a225-1af98fffbf57"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[10, 11, 12],\n",
              "       [13, 14, 15],\n",
              "       [16, 17, 18]])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Indexing in arrays works same as that of list\n",
        "\n",
        "a_range[0] # printing all the columns of first row"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BpNpo-eDt9Fr",
        "outputId": "5787da68-2de1-4a72-e63e-500229642a7a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([10, 11, 12])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a_range[:,2] #printing all the rows of second column"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HbDG7M3QuCDQ",
        "outputId": "84f6470a-93e7-4616-8678-c2afb13b0c8e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([12, 15, 18])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "iden = np.eye(3) #idnetity matrix of given size\n",
        "iden"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RQ7UV_-fjJw3",
        "outputId": "115c0cf1-c035-4e31-fedf-88338ba1cbb8"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0.],\n",
              "       [0., 1., 0.],\n",
              "       [0., 0., 1.]])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## adding two matrices\n",
        "summed = a_range + iden\n",
        "summed\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hYJXXvnwjPfE",
        "outputId": "1db6c93b-816f-4341-c41d-69777248daf9"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[11., 11., 12.],\n",
              "       [13., 15., 15.],\n",
              "       [16., 17., 19.]])"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### arrays support normal matrix multiplication that you are used to, point-wise multiplication\n",
        "### and dot product as well.\n",
        "\n",
        "mul = a_range@iden ## normal multiplication\n",
        "mul\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VoyeEptRjYRu",
        "outputId": "9976bed0-d584-4e0c-fc71-5d534bd1b906"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[10., 11., 12.],\n",
              "       [13., 14., 15.],\n",
              "       [16., 17., 18.]])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## point wise multiplication\n",
        "p_mul = a_range * iden\n",
        "p_mul"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "58S3a_YmtAe8",
        "outputId": "6f33797d-6229-4c17-8ad9-fe78ce39b1b9"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[10.,  0.,  0.],\n",
              "       [ 0., 14.,  0.],\n",
              "       [ 0.,  0., 18.]])"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Transpose of a matrix.\n",
        "\n",
        "mtx_t = mul.T\n",
        "mtx_t\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HC5uJ03ftJHA",
        "outputId": "9add2a9b-767b-44aa-99d0-b7091dfe8e53"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[10., 13., 16.],\n",
              "       [11., 14., 17.],\n",
              "       [12., 15., 18.]])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Here we are changing the values of last row of the transposed matrix.\n",
        "### basically point wise multiplying the values of last row with 1,2 and 3\n",
        "\n",
        "mtx_t[2] = mtx_t[2]*[1,2,3] ## indexing, point wise multiplication and mutation of values\n",
        "mtx_t"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ROFhfs2lutat",
        "outputId": "9e9d680e-de8d-463d-933c-ff3ef0f9564a"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[10., 13., 16.],\n",
              "       [11., 14., 17.],\n",
              "       [12., 30., 54.]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Just like the greater than 1 (a>1) example we saw earlier.\n",
        "## here we are checking if the elements are divisible by 2 (%), and if they are, then replace by 0.\n",
        "\n",
        "mtx_t[(mtx_t % 2 == 0)] = 0 ## convert even elements of the matrix to zero.\n",
        "mtx_t"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mh80ju2xvAqL",
        "outputId": "9c40202c-f279-4579-9ee0-55d0c0ef0b3c"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0., 13.,  0.],\n",
              "       [11.,  0., 17.],\n",
              "       [ 0.,  0.,  0.]])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Question 3 : \n",
        "\n",
        "##### a)Create a 5x5 matrix of the following form, \n",
        "\n",
        "##### [[1,1]\n",
        "#####  [2,2]]\n",
        "\n",
        "#####  i.e. each row is increasing and has repetive elements.\n",
        "\n",
        "######  Hint : you can use hstack, vstack  etc.\n",
        "\n",
        "##### b) find dot product of the matrix with any matrix. (Figure out the size/ shape of the matrix)"
      ],
      "metadata": {
        "id": "uqWUH6Rv4OhT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Reading Files"
      ],
      "metadata": {
        "id": "GzNoCosKdVa2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## loading from the google drive\n",
        "from google.colab import drive \n",
        "drive.mount('/content/gdrive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_wCHdrtQwDJe",
        "outputId": "f2bc4c72-6e27-4817-ae5c-5ca39e492e19"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with open ('/content/sample_data/README.md', 'r') as f:\n",
        "  a = f.readlines()\n",
        "\n",
        "a ## here a is list of elements/strings each splitted at \\n, \\n is also part of the list element. \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c1rzXSJobLku",
        "outputId": "5d5147de-7b27-4f3b-c90e-6ef2e68969cb"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['This directory includes a few sample datasets to get you started.\\n',\n",
              " '\\n',\n",
              " '*   `california_housing_data*.csv` is California housing data from the 1990 US\\n',\n",
              " '    Census; more information is available at:\\n',\n",
              " '    https://developers.google.com/machine-learning/crash-course/california-housing-data-description\\n',\n",
              " '\\n',\n",
              " '*   `mnist_*.csv` is a small sample of the\\n',\n",
              " '    [MNIST database](https://en.wikipedia.org/wiki/MNIST_database), which is\\n',\n",
              " '    described at: http://yann.lecun.com/exdb/mnist/\\n',\n",
              " '\\n',\n",
              " '*   `anscombe.json` contains a copy of\\n',\n",
              " \"    [Anscombe's quartet](https://en.wikipedia.org/wiki/Anscombe%27s_quartet); it\\n\",\n",
              " '    was originally described in\\n',\n",
              " '\\n',\n",
              " \"    Anscombe, F. J. (1973). 'Graphs in Statistical Analysis'. American\\n\",\n",
              " '    Statistician. 27 (1): 17-21. JSTOR 2682899.\\n',\n",
              " '\\n',\n",
              " '    and our copy was prepared by the\\n',\n",
              " '    [vega_datasets library](https://github.com/altair-viz/vega_datasets/blob/4f67bdaad10f45e3549984e17e1b3088c731503d/vega_datasets/_data/anscombe.json).\\n']"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('/content/sample_data/california_housing_test.csv','r')\n",
        "df.head(10) ## pass as argument number of top elements you wish to print. Head is used to have a quick glance and understand the data."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "CgXsQFpobVGk",
        "outputId": "e25ca144-8430-4af4-f892-cab786c06d7a"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:3326: FutureWarning: In a future version of pandas all arguments of read_csv except for the argument 'filepath_or_buffer' will be keyword-only\n",
            "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   longitude,\"latitude\",\"housing_median_age\",\"total_  ooms\",\"total_bed  \\\n",
              "0  -122.050000,37.370000,27.000000,3885.000000,66...               NaN   \n",
              "1  -118.300000,34.260000,43.000000,1510.000000,31...               NaN   \n",
              "2  -117.810000,33.780000,27.000000,3589.000000,50...               NaN   \n",
              "3  -118.360000,33.820000,28.000000,67.000000,15.0...               NaN   \n",
              "4  -119.670000,36.330000,19.000000,1241.000000,24...               NaN   \n",
              "5  -119.560000,36.510000,37.000000,1018.000000,21...               NaN   \n",
              "6  -121.430000,38.630000,43.000000,1009.000000,22...               NaN   \n",
              "7  -120.650000,35.480000,19.000000,2310.000000,47...               NaN   \n",
              "8  -122.840000,38.400000,15.000000,3080.000000,61...               NaN   \n",
              "9  -118.020000,34.080000,31.000000,2402.000000,63...               NaN   \n",
              "\n",
              "   ooms\",\"population\",\"households\",\"median_income\",\"median_house_value\"  \n",
              "0                                                NaN                     \n",
              "1                                                NaN                     \n",
              "2                                                NaN                     \n",
              "3                                                NaN                     \n",
              "4                                                NaN                     \n",
              "5                                                NaN                     \n",
              "6                                                NaN                     \n",
              "7                                                NaN                     \n",
              "8                                                NaN                     \n",
              "9                                                NaN                     "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4e12d2ed-2fd9-46b9-8d34-cc9cc4670d43\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude,\"latitude\",\"housing_median_age\",\"total_</th>\n",
              "      <th>ooms\",\"total_bed</th>\n",
              "      <th>ooms\",\"population\",\"households\",\"median_income\",\"median_house_value\"</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-122.050000,37.370000,27.000000,3885.000000,66...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-118.300000,34.260000,43.000000,1510.000000,31...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-117.810000,33.780000,27.000000,3589.000000,50...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-118.360000,33.820000,28.000000,67.000000,15.0...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-119.670000,36.330000,19.000000,1241.000000,24...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-119.560000,36.510000,37.000000,1018.000000,21...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-121.430000,38.630000,43.000000,1009.000000,22...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>-120.650000,35.480000,19.000000,2310.000000,47...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>-122.840000,38.400000,15.000000,3080.000000,61...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>-118.020000,34.080000,31.000000,2402.000000,63...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e12d2ed-2fd9-46b9-8d34-cc9cc4670d43')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4e12d2ed-2fd9-46b9-8d34-cc9cc4670d43 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4e12d2ed-2fd9-46b9-8d34-cc9cc4670d43');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df.columns), df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iMMaPe3gduKb",
        "outputId": "2781313f-91db-49f1-dd55-24eec37a2614"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3,\n",
              " Index(['longitude,\"latitude\",\"housing_median_age\",\"total_', 'ooms\",\"total_bed',\n",
              "        'ooms\",\"population\",\"households\",\"median_income\",\"median_house_value\"'],\n",
              "       dtype='object'))"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "GT1dA9Q3eRQU",
        "outputId": "d1c9ccf0-2d69-4bfe-8169-4c0493666886"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'longitude,\"latitude\",\"housing_median_age\",\"total_'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['longitude,\"latitude\",\"housing_median_age\",\"total_'][:5] "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oEZhq9rBe-Hb",
        "outputId": "d61b5620-5c30-4de2-eab3-e6d57151f1c8"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    -122.050000,37.370000,27.000000,3885.000000,66...\n",
              "1    -118.300000,34.260000,43.000000,1510.000000,31...\n",
              "2    -117.810000,33.780000,27.000000,3589.000000,50...\n",
              "3    -118.360000,33.820000,28.000000,67.000000,15.0...\n",
              "4    -119.670000,36.330000,19.000000,1241.000000,24...\n",
              "Name: longitude,\"latitude\",\"housing_median_age\",\"total_, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.rename(columns = {'longitude,\"latitude\",\"housing_median_age\",\"total_':'Detail1'}) ##rename column names as at times it makes it easier for us"
      ],
      "metadata": {
        "id": "-hpbslfWfwy3"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "C0gpXPf1hN5Q",
        "outputId": "34ef45aa-6328-49be-dda3-6ed96c7f5452"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                             Detail1  ooms\",\"total_bed  \\\n",
              "0  -122.050000,37.370000,27.000000,3885.000000,66...               NaN   \n",
              "1  -118.300000,34.260000,43.000000,1510.000000,31...               NaN   \n",
              "2  -117.810000,33.780000,27.000000,3589.000000,50...               NaN   \n",
              "\n",
              "   ooms\",\"population\",\"households\",\"median_income\",\"median_house_value\"  \n",
              "0                                                NaN                     \n",
              "1                                                NaN                     \n",
              "2                                                NaN                     "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3ccbd62-87c9-4420-9b47-d095f38a8625\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Detail1</th>\n",
              "      <th>ooms\",\"total_bed</th>\n",
              "      <th>ooms\",\"population\",\"households\",\"median_income\",\"median_house_value\"</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-122.050000,37.370000,27.000000,3885.000000,66...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-118.300000,34.260000,43.000000,1510.000000,31...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-117.810000,33.780000,27.000000,3589.000000,50...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3ccbd62-87c9-4420-9b47-d095f38a8625')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b3ccbd62-87c9-4420-9b47-d095f38a8625 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b3ccbd62-87c9-4420-9b47-d095f38a8625');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.iloc[:5, 0]  ##iloc - index - 0 to 4 rows and first column only."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A0FFUn-ghP1n",
        "outputId": "f454cf98-3278-4b95-d2ba-ce45ca09a7a2"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    -122.050000,37.370000,27.000000,3885.000000,66...\n",
              "1    -118.300000,34.260000,43.000000,1510.000000,31...\n",
              "2    -117.810000,33.780000,27.000000,3589.000000,50...\n",
              "3    -118.360000,33.820000,28.000000,67.000000,15.0...\n",
              "4    -119.670000,36.330000,19.000000,1241.000000,24...\n",
              "Name: Detail1, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib\n",
        "from matplotlib import pyplot as plt"
      ],
      "metadata": {
        "id": "oJ7JrZqWioIO"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xpoints = np.array([1, 8])\n",
        "ypoints = np.array([3, 10])\n",
        "\n",
        "plt.plot(xpoints, ypoints)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "tzunFbpUxKAP",
        "outputId": "e48b2713-c967-4cc9-cd44-3418943b46f9"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xpoints = np.array([1, 2, 6, 8])\n",
        "ypoints = np.array([3, 8, 1, 10])\n",
        "\n",
        "plt.plot(xpoints, ypoints)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "p7l83i5SxW4k",
        "outputId": "aedb1373-66e1-4a71-e80f-c1e426a916a9"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Creating a dataframe.\n",
        "#### Task: Study about other methods of creating dataframe (for example: using Pandas Series, Lists etc.)"
      ],
      "metadata": {
        "id": "GT6yXu7l1gtL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "1vR1hTJ51ckl"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "values = np.arange(16).reshape(4,4)\n",
        "values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o0W0z3Fr1gOb",
        "outputId": "9ed5751f-bc48-47ae-ed98-8057026be2a7"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3],\n",
              "       [ 4,  5,  6,  7],\n",
              "       [ 8,  9, 10, 11],\n",
              "       [12, 13, 14, 15]])"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe_from_array = pd.DataFrame(values, index = ['a','b','c','d'], columns=['w','x','y','z'] )\n",
        "dataframe_from_array"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "_p5vKhPN2Bey",
        "outputId": "d36ea460-4162-422a-ff24-d06f458daa48"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    w   x   y   z\n",
              "a   0   1   2   3\n",
              "b   4   5   6   7\n",
              "c   8   9  10  11\n",
              "d  12  13  14  15"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9a9a062-bf10-4daf-9600-9e7a4754ab39\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>w</th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "      <th>z</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>a</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>b</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>c</th>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d</th>\n",
              "      <td>12</td>\n",
              "      <td>13</td>\n",
              "      <td>14</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9a9a062-bf10-4daf-9600-9e7a4754ab39')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a9a9a062-bf10-4daf-9600-9e7a4754ab39 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a9a9a062-bf10-4daf-9600-9e7a4754ab39');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe_from_array.loc[['a','b'],['w','x']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "jdIORDyX2h-Z",
        "outputId": "a72eec37-38ca-4da4-c081-24c2d8661b51"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   w  x\n",
              "a  0  1\n",
              "b  4  5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1c36cc6f-b582-4807-aa3f-4e824fda1944\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>w</th>\n",
              "      <th>x</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>a</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>b</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c36cc6f-b582-4807-aa3f-4e824fda1944')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1c36cc6f-b582-4807-aa3f-4e824fda1944 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1c36cc6f-b582-4807-aa3f-4e824fda1944');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe_from_array.iloc[1,3] #second row and last column"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iPTlROGv2r7M",
        "outputId": "d17d52fc-fb78-44f3-c1d0-bf63d2c885cd"
      },
      "execution_count": 51,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe_from_array.iloc[1,3] #second row and last column"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PI4cRSO526jo",
        "outputId": "85d7d7fd-bf95-4a7b-918a-f82951e8eab7"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe_from_array.iloc[::2,::2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "-BpY8Prl3GQX",
        "outputId": "1e6a264c-dfe9-425c-896d-088893a674f7"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   w   y\n",
              "a  0   2\n",
              "c  8  10"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c173dd7-f6ca-492d-9369-02ca97114d44\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>w</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>a</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>c</th>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c173dd7-f6ca-492d-9369-02ca97114d44')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6c173dd7-f6ca-492d-9369-02ca97114d44 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6c173dd7-f6ca-492d-9369-02ca97114d44');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "ys = 200 + np.random.randn(100)\n",
        "x = [x for x in range(len(ys))]\n",
        "\n",
        "plt.plot(x, ys, '-')\n",
        "plt.fill_between(x, ys, 195, where=(ys > 200), facecolor='g', alpha=0.6)\n",
        "\n",
        "plt.title(\"Sample Visualization\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "fqzrScL-GrZU",
        "outputId": "95360490-8c70-46b5-dd46-e0381fe98ca9"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Question 3 : Upload an image to your google drive, Use plt.imread to read image from the google drive and then print that image using plt.imshow\n",
        "\n",
        "\n",
        "## Answer 3 : \n",
        "\n",
        "## 1) make sure drive is loaded and then upload a test image onto your drive\n"
      ],
      "metadata": {
        "id": "mC8rNbeKxiaF"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.imread('/content/gdrive/MyDrive/IMG-20220125-WA0011 (1).jpg')"
      ],
      "metadata": {
        "id": "AbRTVWuAqh_j",
        "outputId": "5f3c8d51-061a-462d-f850-cd851dd3eeda",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[ 58,  62,  71],\n",
              "        [ 58,  62,  71],\n",
              "        [ 58,  62,  71],\n",
              "        ...,\n",
              "        [ 57,  62,  68],\n",
              "        [ 57,  62,  68],\n",
              "        [ 57,  62,  68]],\n",
              "\n",
              "       [[ 59,  62,  71],\n",
              "        [ 59,  62,  71],\n",
              "        [ 59,  62,  71],\n",
              "        ...,\n",
              "        [ 59,  63,  72],\n",
              "        [ 59,  63,  72],\n",
              "        [ 59,  63,  72]],\n",
              "\n",
              "       [[ 54,  56,  68],\n",
              "        [ 54,  56,  68],\n",
              "        [ 54,  56,  68],\n",
              "        ...,\n",
              "        [ 55,  58,  67],\n",
              "        [ 55,  58,  67],\n",
              "        [ 55,  58,  67]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[163, 161, 148],\n",
              "        [159, 156, 151],\n",
              "        [146, 140, 152],\n",
              "        ...,\n",
              "        [161, 158, 151],\n",
              "        [161, 158, 151],\n",
              "        [161, 158, 151]],\n",
              "\n",
              "       [[164, 162, 150],\n",
              "        [159, 155, 152],\n",
              "        [145, 139, 153],\n",
              "        ...,\n",
              "        [161, 158, 151],\n",
              "        [161, 158, 151],\n",
              "        [161, 158, 151]],\n",
              "\n",
              "       [[164, 161, 152],\n",
              "        [159, 155, 154],\n",
              "        [144, 137, 155],\n",
              "        ...,\n",
              "        [161, 158, 151],\n",
              "        [161, 158, 151],\n",
              "        [161, 158, 151]]], dtype=uint8)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing image using plt.imshow()\n",
        "plt.imshow(plt.imread('/content/gdrive/MyDrive/IMG-20220125-WA0011 (1).jpg'))"
      ],
      "metadata": {
        "id": "Ujq-kt47xhMU",
        "outputId": "f158961b-dc7e-4206-cc49-0a64bba56c92",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f75fa1a48d0>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}